<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="$(SolutionDir)(External Libraries)\emFrameworkCore.CodeGen.dll" #> 
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="emFrameworkCore.CodeGen" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".txt" #>
<#
  emT4.EnvironmentInformation xEnvironmentInformation = new emT4.EnvironmentInformation()
  {
    TemplateHost = Host as IServiceProvider,
    GenerationEnvironment = GenerationEnvironment,
    Directory = Path.GetDirectoryName(Host.TemplateFile),
    CodeGenFilename = "(CodeGen).xml",
    TemplateFilename = Path.GetFileName(Host.TemplateFile)
  };

  emT4.Initialize(xEnvironmentInformation);
  foreach (emT4.Entity EntityItem in emT4.EntityItems())
  {
    emT4.LogWrite(emT4.OutputFilename(EntityItem));

#>

//********************************************************************
//*                                                                  *
//* Copyright (c) 2016-<#=DateTime.Now.Year#> ExcelliMatrix, Inc. All Rights Reserved. *
//*                                                                  *
//*    This code was generated from an emFrameworkCode Template.     *
//*                                                                  *
//*                     DO NOT MODIFY THIS FILE.                     *
//*                     -----------------------                      *
//*                                                                  *
//********************************************************************

// Directory:        <#=xEnvironmentInformation.Directory.Replace(xEnvironmentInformation.GetSolutionDirectory(), "{{SolutionDir}}")#>
// CodeGenFilename:  <#=xEnvironmentInformation.CodeGenFilename#>
// TemplateFilename: <#=Path.GetFileName(xEnvironmentInformation.TemplateFilename)#>

<#=emT4.UsingBlock()#>

namespace <#=emT4.GetDictionaryEntry("ClassNamespace")#>
{
 public partial class <#=EntityItem.Name#>WebEntity : <#=EntityItem.Name#>WebEntityDesign, IEntity_WebAPIConnection<<#=EntityItem.Name#>WebEntity>
  {

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public enum CRUDAction { Create, Read, Update, Delete, Load }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public IUserInfo UserInfo
    {
      get
      {
        if (m_xWebUserInfo == null)
          m_xWebUserInfo = new WebUserInfo();
        return m_xWebUserInfo;
      }
      set
      {
        m_xWebUserInfo = (WebUserInfo)value;
      }
    }
    private WebUserInfo m_xWebUserInfo;

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public static DataRequest DataRequestFactory()
    {
      DataRequest xReturnValue = new DataRequest()
      {
        DeleteColumnName = "<#=EntityItem.Name#>Deleted",
        ShowDeletedRow = false
      };

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# if (EntityItem.IncludeMethod("Create")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Create a new <#=EntityItem.Name#> using the specified URI.
    /// </summary>
    /// <param name="a_xURI">The database Connection used to perform the action. The Connection should be opened prior to calling the method.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Create(Uri a_xURI)
    {
      <#=EntityItem.Name#>WebEntity xReturnValue = null;

      try
      {
        //----- Read after confirmation -----
        xReturnValue = Read(a_xURI, <#=EntityItem.Name#>GUID);
      }
      catch (Exception xException)
      {

#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Read")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Read an existing <#=EntityItem.Name#> using the specified URI and <#=EntityItem.Name#>GUID.
    /// </summary>
    /// <param name="a_xURI">The database Connection used to perform the action.</param>
    /// <param name="a_x<#=EntityItem.Name#>GUID">The unique identifies of the <#=EntityItem.Name#> to be retrieved.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Read(Uri a_xURI, GUID a_x<#=EntityItem.Name#>GUID)
    {
      <#=EntityItem.Name#>WebEntity xReturnValue = null;

      try
      {
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    
    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Update")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Update this <#=EntityItem.Name#> using the specified ConnectionString.
    /// </summary>
    /// <param name="a_xURI">The database Connection used to perform the action.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Update(Uri a_xURI)
    {
      <#=EntityItem.Name#>WebEntity xReturnValue = new <#=EntityItem.Name#>WebEntity();

      try
      {
        //----- Read after confirmation -----
        xReturnValue = Read(a_xURI, <#=EntityItem.Name#>GUID);
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Delete")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Delete this <#=EntityItem.Name#> using the specified Uri.
    /// </summary>
    /// <param name="a_xURI">The database Connection used to perform the action.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Delete(Uri a_xURI)
    {
      <#=EntityItem.Name#>WebEntity xReturnValue = null;

      try
      {
        //----- Read after confirmation -----
        xReturnValue = Read(a_xURI, <#=EntityItem.Name#>GUID);
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Delete")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Delete a <#=EntityItem.Name#> using the specified Uri and <#=EntityItem.Name#>GUID.
    /// </summary>
    /// <param name="a_xURI">The database Uri used to perform the action.</param>
    /// <param name="a_x<#=EntityItem.Name#>GUID">The unique identifies of the <#=EntityItem.Name#> to be retrieved.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Delete(Uri a_xURI, GUID a_x<#=EntityItem.Name#>GUID)
    {
      <#=EntityItem.Name#>WebEntity xReturnValue = new <#=EntityItem.Name#>WebEntity();

      try
      {
        //----- Read after confirmation -----
        xReturnValue = Read(a_xURI, a_x<#=EntityItem.Name#>GUID);
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Load")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Loads a set of <#=EntityItem.PluralName#> using the specified ConnectionString and DataRequest.
    /// </summary>
    /// <param name="a_xURI">The database Uri used to perform the action.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public IEnumerable<<#=EntityItem.Name#>WebEntity> Load(Uri a_xURI)
    {
      DataRequest xDataRequest = DataRequestFactory();
      DataResult xDataResult = new DataResult();

      return Load(a_xURI, xDataRequest, out xDataResult);
    }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------
  
    /// <summary>
    /// Loads a set of <#=EntityItem.PluralName#> using the specified Uri and DataRequest.
    /// </summary>
    /// <param name="a_xURI">The database Uri used to perform the action.</param>
    /// <param name="a_xDataRequest">DataRequest that specifies the set of <#=EntityItem.PluralName#> to be retrieved.</param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public IEnumerable<<#=EntityItem.Name#>WebEntity> Load(Uri a_xURI, DataRequest a_xDataRequest)
    {
      DataResult xDataResult = new DataResult();
      return Load(a_xURI, a_xDataRequest, out xDataResult);
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Load")) { 
#>
    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Loads a set of <#=EntityItem.PluralName#> using the specified Connection and DataRequest.
    /// </summary>
    /// <param name="a_xURI">The database Connection used to perform the action.</param>
    /// <param name="a_xDataRequest">DataRequest that specifies the set of <#=EntityItem.PluralName#> to be retrieved; including paging information.</param>
    /// <param name="a_xDataResult">A DataResult containing the TotalCount, FilterCount, PageSize, PageCount, PageNumber, and DatabaseDateTime for the request.</param>
    /// <returns>IEnumerable<<#=EntityItem.Name#>WebEntity></returns>
    public IEnumerable<<#=EntityItem.Name#>WebEntity> Load(Uri a_xURI, DataRequest a_xDataRequest, out DataResult a_xDataResult)
    {
      List<<#=EntityItem.Name#>WebEntity> xReturnValue = null;
      a_xDataResult = null;

      try
      {
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        throw xException;
      }
      finally
      {
      }

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("Import")) { 
#>    //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Import a <#=EntityItem.Name#> from the specified JSON string.
    /// </summary>
    /// <param name="a_sJSONObject"></param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public <#=EntityItem.Name#>WebEntity Import_FromJSON(string a_sJSONObject)
    {
      <#=EntityItem.Name#>WebEntity x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();
      JsonConvert.PopulateObject(a_sJSONObject, x<#=EntityItem.Name#>WebEntity);

      return x<#=EntityItem.Name#>WebEntity;
    }

    //---------------------------------------------------------------------------------------------
  <# } #>
<# if (EntityItem.IncludeMethod("Export")) { 
#>  //---------------------------------------------------------------------------------------------

    /// <summary>
    /// Exports an <#=EntityItem.Name#> instance to a set of Key/Value pairs.
    /// </summary>
    /// <param name="Export_ToDictionary"></param>
    /// <returns><#=EntityItem.Name#>WebEntity</returns>
    public List<KeyValuePair<string, string>> Export_ToKeyValuePairs()
    {
      List<KeyValuePair<string, string>> xReturnValue = new List<KeyValuePair<string, string>>();

<#
  foreach (string sKey in emT4.MetadataDictionary(EntityItem.DesignTierName).Keys)
  {
    if (emT4.MetadataDictionary()[sKey].EntryType == emT4.EntryTypes.TypeProperty)
    {
#>
      xReturnValue.Add(new KeyValuePair<string, string>(nameof(<#=emT4.MetadataDictionary()[sKey].PropertyName#>), nameof(<#=emT4.MetadataDictionary()[sKey].PropertyName#>).ToString()));
<#
    }
  }
#>

      return xReturnValue;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.Name == "User") {
#>    public List<UserWebEntity> Load_ByRoleGUID(string a_sConnectionString, GUID a_xUserGUID)
    {
      List<UserWebEntity> xReturnValue = new List<UserWebEntity>();
      m_sConnectionString = a_sConnectionString;
      try
      {
        using (Uri xURI = new Uri(m_sConnectionString))
        {
          xURI.Open();
          using (SqlCommand xSQLCommand = SQLCommand_Load_ByRoleGUID(xURI, a_xUserGUID))
          {
            UserWebEntity xCapablityEntity = null;
            using (SqlDataReader xSQLDataReader = xSQLCommand.ExecuteReader())
            {

              while (xSQLDataReader.Read())
              {
                xCapablityEntity = Import(xSQLDataReader);
                xReturnValue.Add(xCapablityEntity);
              }

              if (xReturnValue.Count == 0)
                xReturnValue = null;
            }
          }
        }
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        emFramework.Logger.EventLog.WriteException(Global.SystemName, Global.ApplicationName, Global.App.Tier, xException);
      }

      return xReturnValue;
    }

    public List<UserWebEntity> Load_ByRoleGUID(Uri a_xURI, GUID a_xUserGUID)
    {
      List<UserWebEntity> xReturnValue = new List<UserWebEntity>();
      // m_sConnectionString = a_sConnectionString;
      try
      {
        using (Uri xURI = a_xURI)
        {
          xURI.Open();
          using (SqlCommand xSQLCommand = SQLCommand_Load_ByRoleGUID(xURI, a_xUserGUID))
          {
            UserWebEntity xCapablityEntity = null;
            using (SqlDataReader xSQLDataReader = xSQLCommand.ExecuteReader())
            {

              while (xSQLDataReader.Read())
              {
                xCapablityEntity = Import(xSQLDataReader);
                xReturnValue.Add(xCapablityEntity);
              }

              if (xReturnValue.Count == 0)
                xReturnValue = null;
            }
          }
        }
        //a_xURI.Close();
      }
      catch (Exception xException)
      {
#if DEBUG
        if (System.Diagnostics.Debugger.IsAttached)
        {
          System.Diagnostics.Debug.WriteLine(xException.ToString());
          System.Diagnostics.Debugger.Break();
        }
#endif
        emFramework.Logger.EventLog.WriteException(Global.SystemName, Global.ApplicationName, Global.App.Tier, xException);
      }

      return xReturnValue;
    }
<# } #>
    //---------------------------------------------------------------------------------------------

    public static partial class Helper
    {
      //=======================================================================
<# if (EntityItem.IncludeMethod("Read")) { 
#>
      //=======================================================================

      /// <summary>
      /// Read an existing <#=EntityItem.Name#> using the specified Uri and <#=EntityItem.Name#>GUID.
      /// </summary>
      /// <param name="a_xURI">The database Uri used to perform the action.</param>
      /// <param name="a_x<#=EntityItem.Name#>GUID">The unique identifies of the <#=EntityItem.Name#> to be retrieved.</param>
      /// <returns><#=EntityItem.Name#>WebEntity</returns>
      public static <#=EntityItem.Name#>WebEntity Read(Uri a_xURI, GUID a_x<#=EntityItem.Name#>GUID)
      {
        if (m_x<#=EntityItem.Name#>WebEntity == null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Read(a_xURI, a_x<#=EntityItem.Name#>GUID);
      }

      //=======================================================================
<# } #>
<# if (EntityItem.IncludeMethod("Update")) { 
#>
      //=======================================================================

      /// <summary>
      /// Update this <#=EntityItem.Name#> using the specified Uri.
      /// </summary>
      /// <param name="a_xURI">The database  Uri used to perform the action.</param>
      /// <returns><#=EntityItem.Name#>WebEntity</returns>
      public static <#=EntityItem.Name#>WebEntity Update(Uri a_xURI)
      {
        if (m_x<#=EntityItem.Name#>WebEntity == null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Update(a_xURI);
      }

      //=======================================================================
<# } #>
<# if (EntityItem.IncludeMethod("Delete")) { 
#>
      //=======================================================================

      /// <summary>
      /// Delete a <#=EntityItem.Name#> using the specified Uri and <#=EntityItem.Name#>GUID.
      /// </summary>
      /// <param name="a_xURI">The database Uri used to perform the action.</param>
      /// <param name="a_x<#=EntityItem.Name#>GUID">The unique identifies of the <#=EntityItem.Name#> to be retrieved.</param>
      /// <returns><#=EntityItem.Name#>WebEntity</returns>
      public static <#=EntityItem.Name#>WebEntity Delete(Uri a_xURI, GUID a_x<#=EntityItem.Name#>GUID)
      {
        if (m_x<#=EntityItem.Name#>WebEntity == null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Delete(a_xURI, a_x<#=EntityItem.Name#>GUID);
      }

      //=======================================================================
<# } #>
<# if (EntityItem.IncludeMethod("Load")) { 
#>
      //=======================================================================

      /// <summary>
      /// Loads a set of <#=EntityItem.PluralName#> using the specified Uri and DataRequest.
      /// </summary>
      /// <param name="a_xURI">The database Uri used to perform the action.</param>
      /// <param name="a_xDataRequest">DataRequest that specifies the set of <#=EntityItem.PluralName#> to be retrieved.</param>
      /// <returns><#=EntityItem.Name#>WebEntity</returns>
      public static IEnumerable<<#=EntityItem.Name#>WebEntity> Load(Uri a_xURI, DataRequest a_xDataRequest)
      {
        if (m_x<#=EntityItem.Name#>WebEntity == null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Load(a_xURI, a_xDataRequest);
      }


      //=======================================================================
<# } #>
<# if (EntityItem.IncludeMethod("Load")) { 
#>
      //=======================================================================

      /// <summary>
      /// Loads a set of <#=EntityItem.PluralName#> using the specified Uri and DataRequest.
      /// </summary>
      /// <param name="a_xURI">The database Uri used to perform the action.</param>
      /// <param name="a_xDataRequest">DataRequest that specifies the set of <#=EntityItem.PluralName#> to be retrieved; including paging information.</param>
      /// <param name="a_xDataResult">A DataResult containing the TotalCount, FilterCount, PageSize, PageCount, PageNumber, and DatabaseDateTime for the request.</param>
      /// <returns>IEnumerable<<#=EntityItem.Name#>WebEntity></returns>
      public static IEnumerable<<#=EntityItem.Name#>WebEntity> Load(Uri a_xURI, DataRequest a_xDataRequest, out DataResult a_xDataResult)
      {
        if (m_x<#=EntityItem.Name#>WebEntity== null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Load(a_xURI, a_xDataRequest, out a_xDataResult);
      }

      //=======================================================================
<# } #>
<# if (EntityItem.IncludeMethod("Import")) { 
#>      //=======================================================================

      /// <summary>
      /// Import a <#=EntityItem.Name#>WebEntity from the specified JSON string.
      /// </summary>
      /// <param name="a_sJSONObject"></param>
      /// <returns><#=EntityItem.Name#>WebEntity</returns>
      public static <#=EntityItem.Name#>WebEntity Import_FromJSON(string a_sJSONObject)
      {
        if (m_x<#=EntityItem.Name#>WebEntity == null)
          m_x<#=EntityItem.Name#>WebEntity = new <#=EntityItem.Name#>WebEntity();

        return m_x<#=EntityItem.Name#>WebEntity.Import_FromJSON(a_sJSONObject);
      }

      //=======================================================================
<# } #>
      //=======================================================================

      private static <#=EntityItem.Name#>WebEntity m_x<#=EntityItem.Name#>WebEntity = null;

      //=======================================================================
      //=======================================================================
    }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public <#=EntityItem.Name#>WebEntity()
    {
    }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public <#=EntityItem.Name#>WebEntity(IUserInfo a_xUserInfo)
    {
      UserInfo = a_xUserInfo;
    }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------
    //-----
    //----- Metadata available for "<#=emT4.FormatEntity(EntityItem.DesignTierName)#>"
    //-----
<#
  foreach (string sKey in emT4.MetadataDictionary(EntityItem.DesignTierName).Keys)
  {
    if (emT4.MetadataDictionary()[sKey].EntryType == emT4.EntryTypes.TypeProperty)
    {
#>
    //----- <#=emT4.MetadataDictionary()[sKey].PropertyName.PadRight(40)#> Key = "<#=sKey#>"
<#
    }
  }
#>
    //-----
    //-----
<#
  foreach (string sKey in emT4.MetadataDictionary(EntityItem.DesignTierName).Keys)
  {
#>
    //----- <#=("(" + emT4.MetadataDictionary()[sKey].EntryType + ")").PadRight(40)#> <#=sKey#> == "<#=emT4.MetadataDictionary()[sKey].Value??"null"#>"
<#
  }
#>
    //-----
    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

  }
}

//**************************************************************************************
//*                                                                                    *
//* This code was generated from an emFrameworkCore Template. DO NOT MODIFY THIS FILE. *
//*                                                           -----------------------  *
//**************************************************************************************
<#
    emT4.SaveOutput(EntityItem);
  }
#>
