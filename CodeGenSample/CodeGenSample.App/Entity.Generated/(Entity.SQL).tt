<#@ template language="C#" hostspecific="true" debug="True" #>
<#@ assembly name="$(SolutionDir)(External Libraries)\emFrameworkCore.CodeGen.dll" #> 
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System" #>
<#@ import namespace="emFrameworkCore.CodeGen" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".txt" #>
<#
  emT4.EnvironmentInformation xEnvironmentInformation = new emT4.EnvironmentInformation()
  {
    TemplateHost = Host as IServiceProvider,
    GenerationEnvironment = GenerationEnvironment,
    Directory = Path.GetDirectoryName(Host.TemplateFile),
    CodeGenFilename = "(CodeGen.SQL).xml",
    TemplateFilename = Path.GetFileName(Host.TemplateFile)
  };

  emT4.Initialize(xEnvironmentInformation);
  foreach (emT4.Entity EntityItem in emT4.EntityItems())
  {
    emT4.LogWrite(emT4.OutputFilename(EntityItem));
    string sTableName = emT4.MetadataDictionary_AttributeProperty(EntityItem.Name + EntityItem.FileTier + "EntityDesign", "DatabaseTable", "Name").FirstOrDefault().Value.Value;
#>
//********************************************************************
//*                                                                  *
//* Copyright (c) 2016-<#=DateTime.Now.Year#> ExcelliMatrix, Inc. All Rights Reserved. *
//*                                                                  *
//*    This code was generated from an emFrameworkCode Template.     *
//*                                                                  *
//*                     DO NOT MODIFY THIS FILE.                     *
//*                     -----------------------                      *
//*                                                                  *
//********************************************************************

// Directory:        <#=xEnvironmentInformation.Directory.Replace(xEnvironmentInformation.GetSolutionDirectory(), "{{SolutionDir}}")#>
// CodeGenFilename:  <#=xEnvironmentInformation.CodeGenFilename#>
// TemplateFilename: <#=Path.GetFileName(xEnvironmentInformation.TemplateFilename)#>

<#=emT4.UsingBlock()#>

namespace <#=emT4.GetDictionaryEntry("ClassNamespace")#>
{
   public partial class <#=EntityItem.Name#><#=EntityItem.FileTier#>Entity : <#=EntityItem.Name#><#=EntityItem.FileTier#>EntityDesign
   {
    //---------------------------------------------------------------------------------------------
<# if (EntityItem.IncludeMethod("SQLCommand_Create")) { #>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Create(SqlConnection a_xSQLConnection)
    {
      string sSQLStatement = "";

      sSQLStatement =
      $@"
        insert into <#=sTableName#>
        (
<#
  foreach (emT4.MetadataEntry xMetadataEntry in emT4.GetMetadataEntries(EntityItem.DesignTierName, emT4.EntryTypes.TypeProperty, "Column", "Key"))
  {
#>
          <#=xMetadataEntry.PropertyName#>, 
<#
  }
#>
          <#=EntityItem.Name#>GUID
        )
        values
        (
<#
  foreach (emT4.MetadataEntry xMetadataEntry in emT4.GetMetadataEntries(EntityItem.DesignTierName, emT4.EntryTypes.TypeProperty, "Column", "Key"))
  {
#>
          @<#=xMetadataEntry.PropertyName#>, 
<#
  }
#>
          @<#=EntityItem.Name#>GUID
        )
      ";
      if (@<#=EntityItem.Name#>GUID == null)
        <#=EntityItem.Name#>GUID = new GUID();

      SqlCommand xSQLCommand = new SqlCommand(sSQLStatement, a_xSQLConnection);
<#
  foreach (emT4.MetadataEntry xMetadataEntry in emT4.GetMetadataEntries(EntityItem.DesignTierName, emT4.EntryTypes.TypeProperty, "Column", "Key"))
  {
 if (xMetadataEntry.PropertyName.Contains("GUID")) { #>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=xMetadataEntry.PropertyName#>", <#=xMetadataEntry.PropertyName#> == null ? System.DBNull.Value : <#=xMetadataEntry.PropertyName#>.ToString().ToDBNull()));
<# 
  }else{ 
#>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=xMetadataEntry.PropertyName#>", <#=xMetadataEntry.PropertyName#>.ToDBNull()));
<#
  }
  }
#>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=EntityItem.Name#>GUID", <#=EntityItem.Name#>GUID.ToString()));

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("SQLCommand_Delete")) { #>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Delete(SqlConnection a_xSQLConnection)
    {
      SqlCommand xSQLCommand = SQLCommand_Delete(a_xSQLConnection, <#=EntityItem.Name#>GUID);

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("SQLCommand_Delete")) { #>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Delete(SqlConnection a_xSQLConnection, GUID a_xGUID)
    {
      string sSQLStatement = "";

      sSQLStatement =
        $@"
          update <#=sTableName#>
            set
              <#=EntityItem.Name#>Deleted = 'True'
            where
              <#=EntityItem.Name#>GUID = @<#=EntityItem.Name#>GUID;
        ";
      SqlCommand xSQLCommand = new SqlCommand(sSQLStatement, a_xSQLConnection);
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=EntityItem.Name#>GUID", a_xGUID.ToString()));

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("SQLCommand_Load")) { #>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Load(SqlConnection a_xSQLConnection, DataRequest a_xDataRequest)
    {
      //----- NOTE: sSQLStatement is "" by default, this instructs the
      //-----       ApplyDataRequest to use a statement SQLStatement.
      string sSQLStatement = "";

      SqlCommand xSQLCommand = new SqlCommand(sSQLStatement, a_xSQLConnection);
      xSQLCommand = DataRequestExtension.ApplyDataRequest<<#=EntityItem.Name#><#=EntityItem.FileTier#>EntityDesign>(xSQLCommand, a_xDataRequest);

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("SQLCommand_Read")) {#>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Read(SqlConnection a_xSQLConnection)
    {
      SqlCommand xSQLCommand = SQLCommand_Read(a_xSQLConnection, <#=EntityItem.Name#>GUID);

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Read(SqlConnection a_xSQLConnection, GUID a_xGUID)
    {
      string sSQLStatement = "";

      sSQLStatement =
      $@"
        select
            *
          from 
            <#=sTableName#>
          where
            <#=EntityItem.Name#>GUID = @<#=EntityItem.Name#>GUID
      ";

      SqlCommand xSQLCommand = new SqlCommand(sSQLStatement, a_xSQLConnection);
      xSQLCommand.Parameters.Add(new SqlParameter("<#=EntityItem.Name#>GUID", a_xGUID.ToString()));

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
<# if (EntityItem.IncludeMethod("SQLCommand_Update")) { #>
<# List<emT4.MetadataEntry> xListMetadatEntry = emT4.GetMetadataEntries(EntityItem.DesignTierName, emT4.EntryTypes.TypeProperty, "Column", "Key"); #>
    //---------------------------------------------------------------------------------------------

    public SqlCommand SQLCommand_Update(SqlConnection a_xSQLConnection)
    {
      string sSQLStatement = "";

      sSQLStatement =
      $@"
        update <#=sTableName#>
          set 
<#
  foreach (emT4.MetadataEntry xMetadataEntry in xListMetadatEntry)
  {
#>
<#if(xListMetadatEntry.Last().PropertyName != xMetadataEntry.PropertyName ){#>
            <#=xMetadataEntry.PropertyName.PadRight(40)#> = @<#=xMetadataEntry.PropertyName#>,
<#}else{#>
            <#=xMetadataEntry.PropertyName.PadRight(40)#> = @<#=xMetadataEntry.PropertyName#>
<#}
  }
#>
          where
            <#=EntityItem.Name#>GUID = @<#=EntityItem.Name#>GUID
      ";

      SqlCommand xSQLCommand = new SqlCommand(sSQLStatement, a_xSQLConnection);
<#foreach (emT4.MetadataEntry xMetadataEntry in emT4.GetMetadataEntries(EntityItem.DesignTierName, emT4.EntryTypes.TypeProperty, "Column", "Key"))
  {
 if (xMetadataEntry.PropertyName.Contains("GUID")) { #>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=xMetadataEntry.PropertyName#>", <#=xMetadataEntry.PropertyName#>.ToString().ToDBNull()));
<#}else{#>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=xMetadataEntry.PropertyName#>", <#=xMetadataEntry.PropertyName#>.ToDBNull()));
<#
  }
  }
#>
      xSQLCommand.Parameters.Add(new SqlParameter("@<#=EntityItem.Name#>GUID", <#=EntityItem.Name#>GUID.ToString()));

      return xSQLCommand;
    }

    //---------------------------------------------------------------------------------------------
<# } #>
    //---------------------------------------------------------------------------------------------
    //-----
    //----- Metadata available for "<#=emT4.FormatEntity(EntityItem.DesignTierName)#>"
    //-----
<#
  foreach (string sKey in emT4.MetadataDictionary(EntityItem.DesignTierName).Keys)
  {
    if (emT4.MetadataDictionary()[sKey].EntryType == emT4.EntryTypes.TypeProperty)
    {
#>
    //----- <#=emT4.MetadataDictionary()[sKey].PropertyName.PadRight(40)#> Key = "<#=sKey#>"
<#
    }
  }
#>
    //-----
    //-----
<#
  foreach (string sKey in emT4.MetadataDictionary(EntityItem.DesignTierName).Keys)
  {
#>
    //----- <#=("(" + emT4.MetadataDictionary()[sKey].EntryType + ")").PadRight(40)#> <#=sKey#> == "<#=emT4.MetadataDictionary()[sKey].Value??"null"#>"
<#
  }
#>
    //-----
    //---------------------------------------------------------------------------------------------
    //---------------------------------------------------------------------------------------------
  }
}

//**************************************************************************************
//*                                                                                    *
//* This code was generated from an emFrameworkCore Template. DO NOT MODIFY THIS FILE. *
//*                                                           -----------------------  *
//**************************************************************************************
<#
    emT4.SaveOutput(EntityItem);
  }
#>
